// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:root@localhost/prisma"
}

model Job {
  id            Int             @id @default(autoincrement())
  title         String
  companyId     Int
  company       Company         @relation(fields: [companyId], references: [id])
  description   String
  location      String
  minSalary     Decimal
  maxSalary     Decimal
  imageUri      String
  postDate      DateTime
  isOpen        Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  skills        Skill[]         @relation("JobSkills")
  JobApplication JobApplication[]
  arrangement   JobArrangement  // Added arrangement field
  experience    JobExperience   // Added experience field
}

enum JobArrangement {
  HYBRID
  REMOTE
  ONSITE
}

enum JobExperience {
  JUNIOR
  MID
  SENIOR
}

enum UserType {
  COMPANY
  INDIVIDUAL
}

model User {
  id              Int              @id @default(autoincrement())
  name            String
  codeName        String           @unique
  email           String           @unique
  phone           String
  password        String
  jobApplications JobApplication[]
  skills          Skill[]            @relation("UserSkills") // Added relation
  type            UserType
  company         Company?         @relation(fields: [companyId], references: [id])
  companyId       Int?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  UserPost UserPost[]
}

model Company {
  id          Int      @id @default(autoincrement())
  name        String
  location    String
  logoUrl     String
  description String
  highlights  String
  jobs        Job[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?
}

model JobApplication {
  id          Int      @id @default(autoincrement())
  job         Job      @relation(fields: [jobId], references: [id])
  jobId       Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  resume      String
  coverLetter String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserPost {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  title     String
  content   String
  imageUri  String
  topicId   Int
  topic     Topic    @relation(fields: [topicId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  users     User[]   @relation("UserSkills") // Added relation
  jobs      Job[]    @relation("JobSkills") // Added relation
}

model Topic {
  id        Int      @id @default(autoincrement())
  name      String
  posts     UserPost[] // Add reverse relation
}
